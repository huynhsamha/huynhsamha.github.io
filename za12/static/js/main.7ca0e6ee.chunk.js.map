{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","colors","pink","purple","orange","green","blue","blueDark","blueLight","gray","color","text","concat","show4","cb","_this","typedLine4","Typed","line4","strings","typeSpeed","fadeOut","backDelay","onComplete","show3","typedLine3","line3","prefix","repeat","show2","typedLine2","line2","show1","typedLine1","line1","this","typed","destroy","_this2","_this3","react_default","a","createElement","className","ref","style","whiteSpace","marginTop","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ca0e6ee.chunk.js","sourcesContent":["import React from 'react';\nimport Typed from 'typed.js';\n\nimport './App.scss';\nimport { join } from 'upath';\n\nclass App extends React.Component {\n\n  componentWillUnmount() {\n    this.typed.destroy();\n  }\n\n  colors = {\n    pink: '#ed1e79',\n    purple: '#7435b5',\n    orange: '#f05b2f',\n    green: '#7ac943',\n    blue: '#0068ff',\n    blueDark: '#1947db',\n    blueLight: '#00ffff',\n    gray: '#e9e9e9'\n  }\n\n  color = (text, color) => {\n    return `<span style='color:${color}'>${text}</span>`;\n  }\n\n  show4 = (cb) => {\n    this.typedLine4 = new Typed(this.line4, {\n      strings: [\n        '<span class=\"simple\">------------------ From ZTE -----------------</span>'\n      ],\n      typeSpeed: 10,\n      fadeOut: true,\n      backDelay: 0,\n      onComplete: () => {\n        cb();\n      }\n    })\n  }\n\n  show3 = (cb) => {\n    this.typedLine3 = new Typed(this.line3, {\n      strings: [\n        //\n        `${this.prefix} ` + '.'.repeat(29),\n        //\n        this.prefix + ' ' +\n        '\"' + \n        this.color('Z', this.colors.blueLight) +\n        '\"'\n      ],\n      typeSpeed: 20,\n      fadeOut: true,\n      backDelay: 0,\n      onComplete: () => {\n        cb();\n      }\n    })\n  }\n\n  show2 = (cb) => {\n    this.typedLine2 = new Typed(this.line2, {\n      strings: [\n        //\n        this.prefix + ' ' + '.'.repeat(36),\n        //\n        this.prefix + ' ' +\n        this.color('System.out.println', this.colors.gray) + '( ' +\n        this.color('za', this.colors.blueLight) +\n        this.color('[', this.colors.gray) +\n        this.color('12', this.colors.green) +\n        this.color(']', this.colors.gray) +\n        ' );'\n      ],\n      typeSpeed: 20,\n      fadeOut: true,\n      backDelay: 0,\n      onComplete: () => {\n        cb();\n      }\n    })\n  }\n\n  show1 = (cb) => {\n    this.typedLine1 = new Typed(this.line1, {\n      strings: [\n        this.prefix + ' ' +\n        this.color('String', this.colors.gray) + ' ' +\n        this.color('za', this.colors.blueLight) + ' = ' +\n        this.color('\"Do u &lt;3 me?', this.colors.gray) + ' ' +\n        this.color('ZA', this.colors.green) + ' ' +\n        this.color('&hearts;', this.colors.pink) + ' ' +\n        this.color('YOU!\";', this.colors.gray)\n      ],\n      typeSpeed: 20,\n      onComplete: () => {\n        cb();\n      }\n    })\n  }\n\n  componentDidMount() {\n    let prefixes = ['&#x21aa;', '&#x27A5;', '&#x27A0;', '&#x279C;', '&#10551;']\n    this.prefix = prefixes[0];\n\n    this.show1(() => {\n      this.show2(() => {\n        this.show3(() => {\n          this.show4(() => {\n\n          });\n        })\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <div className=\"wrap\">\n          <div className=\"type-wrap\">\n            <span ref={(line1) => { this.line1 = line1; }} style={{ whiteSpace: 'pre' }} />\n          </div>\n          <div className=\"type-wrap\">\n            <span ref={(line2) => { this.line2 = line2; }} style={{ whiteSpace: 'pre' }} />\n          </div>\n          <div className=\"type-wrap\">\n            <span ref={(line3) => { this.line3 = line3; }} style={{ whiteSpace: 'pre' }} />\n          </div>\n          <div className=\"type-wrap\" style={{ marginTop: 25 }}>\n            <span ref={(line4) => { this.line4 = line4; }} style={{ whiteSpace: 'pre' }} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}